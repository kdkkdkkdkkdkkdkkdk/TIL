#1.0 Data Types of Python

variable(변수)에 저장할 수 있는 Types
    1. number(숫자열)
        1-1. integer(정수), float(소수)
    2. string(문자열)
    3. boolean(참, 거짓/ True, False)
    4. none(존재하지 않는다/ None)

super_long_variable, _ : snake case
소문자, 단어 사이에 '_' 붙여줌, Python 생태계의 약속

#1.1 Lists in Python

Sequence Types(열거형)
    List(Mutable sequence)
    'python list libary' - python 동작 docs
    days = ["Mon","Tue","Wed","Thur","Fri"]
    print("Mon" in days) -> True
    print(type(days)) -> list
    print(len(days)) -> 5
    
    Mutable operations
    Mutable -> Can change, modify
    Immutable -> Can not change

    days.append("Sat")
    days.reverse()

#1.2 Tuples and Dicts

Sequence Types
    Tuple(Immutable sequence)
    days = ("Mon","Tue","Wed","Thur","Fri")
    print(type(days)) -> tuple

    Dictionary
    nico = {
    'name' = 'Nico'
    'age' = 29
    'korean' = True
    'fav_food' = ["Kimchi","Sashimi"]
    }
    nico['hansome'] = True
    key: value
    Dictionary 내에 모든 types 저장 가능(list, tuple 등)

#1.3 Built in Functions

    print()
    len()
    int()
    float()
    ...

#1.4 Creating a Your First Python Function

    def say_hello():
        print("hello")

    say_hello() << () : it means 'execute'

#1.5 Function Arguments

    def say_hello(who):
        print("hello",who)
    
    say_hello("Nicolas")
    > hello Nicolas

    def plus(a,b):
        print(a+b)

    def minus(a,b):
        print(a-b)

    Argument에 default value를 지정할 수 있다.

#1.6 Returns

    def p_plus(a,b)
        print(a+b)
    def r_plus(a+b)
        return a+b

    p_result = p_plus(2,3) -> 그저 console에 print할 뿐
    r_result = r_plus(2,3) -> return 2+3 값으로 치환됨
    print(p_result,r_result)
    5
    None 5

#1.7 Keyworded Arguments

    def plus(a,b):
        return a-b
    result = plus(b=30, a=1)
    print(result)
    -29 -> 파이썬은 인자의 순서를 신경 쓸 필요없이 인자의 이름만 신경쓰면 된다.

    def say_hello(name,age):
        return f"Hello {name} you are {age} years old"
        #or return "Hello " + name + " you are " + age + " years old"
    hello = say_hello("nico","12")
    print(hello)
    Hello nico you are 12 years old

#1.8 Code Challenge!

    +,-,*,/,*-1,**,%

    def plus(a,b):
    return (int(a)+int(b))

    def minus(a,b):
    return (int(a)-int(b))
    
    def times(a,b):
    return (int(a)*int(b))
    
    def devision(a,b):
    return (int(a)/int(b))
    
    def negation(a):
    return (int(a)*-1)
    
    def power(a,b):
    return (int(a)**int(b))
    
    def remainder(a,b):
    return (int(a)%int(b))

#1.9 Conditional part One

    def plus(a,b):
        if type(b) is str:
            return None
        else:
            return a+b

    plus(12,"10")
    None

    def plus(a,b):
        if type(b) is int or type (b) is float:
            return a+b
        else:
            return None
    
    print(plus(12,1.2))
    13.2

#1.10 if else and or

    Boolean Operations - and, or, not

    def age_check(age):
        print(f"you are {age}")
        if age < 18:
            print("you cant drink")
        elif age == 18 or age == 19:
            print("you are new to this!")
        elif age > 20 and age < 25:
            print("you are still kind of young")
        else:
            print("enjoy your drink")
    age_check(23)

#1.11 for in

    days = ("Mon","Tue","Wed","Thu","Fri")
    for x in days:
        if x is "Wed":
            break
        else:
            print(x)

#1.12 Modules

    import math

    print(math.ceil(1.2))
    print(math.fabs(-1.2))

    from math import ceil, fsum

    print(ceil(1.2))
    print(fsum([1,2,3,4,5,6,7]))

    from math import fsum as sexy_sum

    print(sexy_sum([1,2,3,4,5,6,7]))

    #다른 .py에 def된 함수를 가져올 수 있음
    from caculator import plus, minus
    print(plus(1,2),minus(1,2))